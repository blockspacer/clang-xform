#ifndef TOOLING_UTIL_HPP
#define TOOLING_UTIL_HPP

#include <string>

#include "clang/Frontend/TextDiagnosticPrinter.h"
#include "clang/Basic/SourceLocation.h"

// execute the given command line
int ExecCmd(const std::string& cmd, std::string& result);
inline int ExecCmd(const std::string& cmd) {
    std::string tmp;
    return ExecCmd(cmd, tmp);
}

// parse config file and return string values for a given key
// return true if succeed
bool ParseConfigFile(const std::string& fileName, const std::string& key, std::vector<std::string>& args);

/**
 * Ignoring all diagnostic messages generated by libTooling unless
 * libTooling actually fails (returns non-zero).
 */
class DiagnosticLogger final : public clang::TextDiagnosticPrinter {
  public:
    using clang::TextDiagnosticPrinter::TextDiagnosticPrinter;

    void HandleDiagnostic(clang::DiagnosticsEngine::Level level,
                          const clang::Diagnostic& info) override {
        clang::TextDiagnosticPrinter::HandleDiagnostic(std::move(level), info);
        NumErrors = 0u; // ignore any/all errors encountered.
    }

    bool IncludeInDiagnosticCounts() const override {
        return false; // ignore any/all errors encountered.
    }
};

// forward declaration
namespace clang {
class SourceManager;
class LangOptions;
}

// self-defined functions to get SourceLocation for expression in MACRO
clang::SourceLocation getExpansionLocStart(clang::SourceLocation loc, const clang::SourceManager& sm);
clang::SourceLocation getExpansionLocEnd(clang::SourceLocation loc, const clang::SourceManager& sm);

// self-define functions to retrieve source code context from Lexer module
std::string getSourceText(clang::SourceLocation start,
                          clang::SourceLocation end,
                          const clang::SourceManager& sm,
                          const clang::LangOptions &langOpts);

// convinent function for logging
void LogReplacement(clang::SourceLocation loc, const clang::SourceManager& sm,
                    const std::string& oldExpr, const std::string& newExpr);

void LogASTNode(clang::SourceLocation loc, const clang::SourceManager& sm,
                const std::string& expr);

#endif
